plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id "com.avast.gradle.docker-compose" version "0.17.11"
}

group = 'com.hendisantika'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-redis-reactive"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "io.projectreactor:reactor-test"
}

tasks.named('test') {
    useJUnitPlatform()
}

// Local Development
dockerCompose {
    useComposeFiles = ["${rootDir}/docker/docker-compose.yml"]
}

task bootRunLocal(group: 'Application', type: org.springframework.boot.gradle.tasks.run.BootRun) {
    dependsOn('composeUp')
    description('Runs the application and database locally.')
    mainClass.set("com.hendisantika.redisexample.SpringWebfluxRedisExampleApplication")
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ['-Dspring.profiles.active=local']
}

task bootRunLocalDebug(group: 'SpringWebfluxRedisExampleApplication', type: org.springframework.boot.gradle.tasks.run.BootRun) {
    dependsOn('composeUp')
    description('Runs the application (with debugger) and database locally.')
    mainClass.set("com.hendisantika.redisexample.SpringWebfluxRedisExampleApplication")
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ['-Dspring.profiles.active=local', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
}

task startRedis(group: 'Database') {
    dependsOn('composeUp')
    description('Starts the local Redis database.')
}

task stopRedis(group: 'Database') {
    dependsOn('composeDownForced')
    description('Stops the local Redis database.')
}
